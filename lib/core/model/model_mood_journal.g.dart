// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model_mood_journal.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Feelings.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Feelings TABLE
class TableFeelings extends SqfEntityTableBase {
  TableFeelings() {
    // declare properties of EntityTable
    tableName = 'feelings';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('filePath', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableFeelings();
  }
}

// Tags TABLE
class TableTags extends SqfEntityTableBase {
  TableTags() {
    // declare properties of EntityTable
    tableName = 'tags';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTags();
  }
}

// Journal TABLE
class TableJournal extends SqfEntityTableBase {
  TableJournal() {
    // declare properties of EntityTable
    tableName = 'journal';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('date', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldRelationshipBase(
          TableFeelings.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'id_feeling'),
      SqfEntityFieldBase('idTags', DbType.text),
      SqfEntityFieldBase('stressLevel', DbType.integer),
      SqfEntityFieldBase('selfAssessment', DbType.integer),
      SqfEntityFieldBase('note', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableJournal();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class ModelMoodJournal extends SqfEntityModelProvider {
  ModelMoodJournal() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableFeelings.getInstance,
      TableTags.getInstance,
      TableJournal.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Feelings
class Feelings extends TableBase {
  Feelings({this.id, this.name, this.filePath}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Feelings.withFields(this.name, this.filePath) {
    _setDefaultValues();
  }
  Feelings.withId(this.id, this.name, this.filePath) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Feelings.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['filePath'] != null) {
      filePath = o['filePath'].toString();
    }
  }
  // FIELDS (Feelings)
  int? id;
  String? name;
  String? filePath;

  // end FIELDS (Feelings)

// COLLECTIONS & VIRTUALS (Feelings)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plJournals', 'plField2'..]) or so on..
  List<Journal>? plJournals;

  /// get Journal(s) filtered by id=id_feeling
  JournalFilterBuilder? getJournals(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Journal()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .id_feeling
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Feelings)

  static const bool _softDeleteActivated = false;
  FeelingsManager? __mnFeelings;

  FeelingsManager get _mnFeelings {
    return __mnFeelings = __mnFeelings ?? FeelingsManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (filePath != null || !forView) {
      map['filePath'] = filePath;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (filePath != null || !forView) {
      map['filePath'] = filePath;
    }

// COLLECTIONS (Feelings)
    if (!forQuery) {
      map['Journals'] = await getJournals()!.toMapList();
    }
// END COLLECTIONS (Feelings)

    return map;
  }

  /// This method returns Json String [Feelings]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Feelings]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, filePath];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, filePath];
  }

  static Future<List<Feelings>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Feelings.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Feelings>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Feelings>[];
    try {
      objList = list
          .map((feelings) => Feelings.fromMap(feelings as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Feelings.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Feelings>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Feelings> objList = <Feelings>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Feelings.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('feelings.plJournals') && */ (preloadFields ==
                null ||
            preloadFields.contains('plJournals'))) {
          /*_loadedfields!.add('feelings.plJournals'); */ obj.plJournals =
              obj.plJournals ??
                  await obj.getJournals()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Feelings by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Feelings] if exist, otherwise returns null
  Future<Feelings?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Feelings? obj;
    final data = await _mnFeelings.getById([id]);
    if (data.length != 0) {
      obj = Feelings.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('feelings.plJournals') && */ (preloadFields ==
                null ||
            preloadFields.contains('plJournals'))) {
          /*_loadedfields!.add('feelings.plJournals'); */ obj.plJournals =
              obj.plJournals ??
                  await obj.getJournals()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Feelings) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnFeelings.insert(this, ignoreBatch);
    } else {
      await _mnFeelings.update(this);
    }

    return id;
  }

  /// Saves the (Feelings) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnFeelings.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnFeelings.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Feelings. Returns a new Primary Key value of Feelings

  /// <returns>Returns a new Primary Key value of Feelings
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Feelings> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Feelings> feelingses,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ModelMoodJournal().batchStart();
    for (final obj in feelingses) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ModelMoodJournal().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < feelingses.length; i++) {
        if (feelingses[i].id == null) {
          feelingses[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnFeelings.rawInsert(
          'INSERT OR REPLACE INTO feelings (id, name, filePath)  VALUES (?,?,?)',
          [id, name, filePath],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Feelings id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Feelings id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Feelings Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Feelings>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Feelings> feelingses,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnFeelings.rawInsertAll(
        'INSERT OR REPLACE INTO feelings (id, name, filePath)  VALUES (?,?,?)',
        feelingses,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Feelings

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Feelings invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Journal().select().id_feeling.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnFeelings
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnFeelings.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Feelings] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  FeelingsFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return FeelingsFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  FeelingsFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return FeelingsFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion feelings

// region FeelingsField
class FeelingsField extends FilterBase {
  FeelingsField(FeelingsFilterBuilder feelingsFB) : super(feelingsFB);

  @override
  FeelingsFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder isNull() {
    return super.isNull() as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as FeelingsFilterBuilder;
  }

  @override
  FeelingsField get not {
    return super.not as FeelingsField;
  }
}
// endregion FeelingsField

// region FeelingsFilterBuilder
class FeelingsFilterBuilder extends ConjunctionBase {
  FeelingsFilterBuilder(Feelings obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnFeelings = obj._mnFeelings;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  FeelingsManager? _mnFeelings;

  /// put the sql keyword 'AND'
  @override
  FeelingsFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  FeelingsFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  FeelingsFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  FeelingsFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  FeelingsFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  FeelingsFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  FeelingsFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  FeelingsFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  FeelingsFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  FeelingsFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  FeelingsFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  FeelingsField _setField(FeelingsField? field, String colName, DbType dbtype) {
    return FeelingsField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  FeelingsField? _id;
  FeelingsField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  FeelingsField? _name;
  FeelingsField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  FeelingsField? _filePath;
  FeelingsField get filePath {
    return _filePath = _setField(_filePath, 'filePath', DbType.text);
  }

  /// Deletes List<Feelings> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Journal) according to DeleteRule.CASCADE
    final idListJournalBYid_feeling = toListPrimaryKeySQL(false);
    final resJournalBYid_feeling = await Journal()
        .select()
        .where('id_feeling IN (${idListJournalBYid_feeling['sql']})',
            parameterValue: idListJournalBYid_feeling['args'])
        .delete(hardDelete);
    if (!resJournalBYid_feeling.success) {
      return resJournalBYid_feeling;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnFeelings!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnFeelings!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from feelings ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnFeelings!.updateBatch(qparams, values);
  }

  /// This method always returns [Feelings] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Feelings?
  @override
  Future<Feelings?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnFeelings!.toList(qparams);
    final data = await objFuture;
    Feelings? obj;
    if (data.isNotEmpty) {
      obj = Feelings.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('feelings.plJournals') && */ (preloadFields ==
                null ||
            preloadFields.contains('plJournals'))) {
          /*_loadedfields!.add('feelings.plJournals'); */ obj.plJournals =
              obj.plJournals ??
                  await obj.getJournals()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Feelings]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Feelings?
  @override
  Future<Feelings> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Feelings();
  }

  /// This method returns int. [Feelings]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? feelingsCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final feelingsesFuture = await _mnFeelings!.toList(qparams);
    final int count = feelingsesFuture[0]['CNT'] as int;
    if (feelingsCount != null) {
      feelingsCount(count);
    }
    return count;
  }

  /// This method returns List<Feelings> [Feelings]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Feelings>
  @override
  Future<List<Feelings>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Feelings> feelingsesData = await Feelings.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return feelingsesData;
  }

  /// This method returns Json String [Feelings]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Feelings]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Feelings]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnFeelings!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Feelings]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM feelings WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnFeelings!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Feelings]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnFeelings!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Feelings.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnFeelings!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion FeelingsFilterBuilder

// region FeelingsFields
class FeelingsFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fFilePath;
  static TableField get filePath {
    return _fFilePath =
        _fFilePath ?? SqlSyntax.setField(_fFilePath, 'filePath', DbType.text);
  }
}
// endregion FeelingsFields

//region FeelingsManager
class FeelingsManager extends SqfEntityProvider {
  FeelingsManager()
      : super(ModelMoodJournal(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'feelings';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion FeelingsManager
// region Tags
class Tags extends TableBase {
  Tags({this.id, this.name}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Tags.withFields(this.name) {
    _setDefaultValues();
  }
  Tags.withId(this.id, this.name) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Tags.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
  }
  // FIELDS (Tags)
  int? id;
  String? name;

  // end FIELDS (Tags)

  static const bool _softDeleteActivated = false;
  TagsManager? __mnTags;

  TagsManager get _mnTags {
    return __mnTags = __mnTags ?? TagsManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }

    return map;
  }

  /// This method returns Json String [Tags]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tags]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name];
  }

  static Future<List<Tags>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tags.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Tags>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tags>[];
    try {
      objList = list
          .map((tags) => Tags.fromMap(tags as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tags.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tags>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tags> objList = <Tags>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tags.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tags by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Tags] if exist, otherwise returns null
  Future<Tags?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Tags? obj;
    final data = await _mnTags.getById([id]);
    if (data.length != 0) {
      obj = Tags.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tags) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTags.insert(this, ignoreBatch);
    } else {
      await _mnTags.update(this);
    }

    return id;
  }

  /// Saves the (Tags) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTags.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTags.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Tags. Returns a new Primary Key value of Tags

  /// <returns>Returns a new Primary Key value of Tags
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Tags> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tags> tagses,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ModelMoodJournal().batchStart();
    for (final obj in tagses) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ModelMoodJournal().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < tagses.length; i++) {
        if (tagses[i].id == null) {
          tagses[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTags.rawInsert(
          'INSERT OR REPLACE INTO tags (id, name)  VALUES (?,?)',
          [id, name],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Tags id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Tags id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tags Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Tags>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Tags> tagses,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTags.rawInsertAll(
        'INSERT OR REPLACE INTO tags (id, name)  VALUES (?,?)', tagses,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Tags

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Tags invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTags
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTags.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Tags] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  TagsFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TagsFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TagsFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TagsFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tags

// region TagsField
class TagsField extends FilterBase {
  TagsField(TagsFilterBuilder tagsFB) : super(tagsFB);

  @override
  TagsFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder isNull() {
    return super.isNull() as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TagsFilterBuilder;
  }

  @override
  TagsFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TagsFilterBuilder;
  }

  @override
  TagsField get not {
    return super.not as TagsField;
  }
}
// endregion TagsField

// region TagsFilterBuilder
class TagsFilterBuilder extends ConjunctionBase {
  TagsFilterBuilder(Tags obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnTags = obj._mnTags;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TagsManager? _mnTags;

  /// put the sql keyword 'AND'
  @override
  TagsFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TagsFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TagsFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TagsFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TagsFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TagsFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TagsFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TagsFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TagsFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TagsFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TagsFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TagsField _setField(TagsField? field, String colName, DbType dbtype) {
    return TagsField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TagsField? _id;
  TagsField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TagsField? _name;
  TagsField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  /// Deletes List<Tags> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTags!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTags!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from tags ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTags!.updateBatch(qparams, values);
  }

  /// This method always returns [Tags] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tags?
  @override
  Future<Tags?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTags!.toList(qparams);
    final data = await objFuture;
    Tags? obj;
    if (data.isNotEmpty) {
      obj = Tags.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Tags]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tags?
  @override
  Future<Tags> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Tags();
  }

  /// This method returns int. [Tags]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? tagsCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tagsesFuture = await _mnTags!.toList(qparams);
    final int count = tagsesFuture[0]['CNT'] as int;
    if (tagsCount != null) {
      tagsCount(count);
    }
    return count;
  }

  /// This method returns List<Tags> [Tags]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Tags>
  @override
  Future<List<Tags>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Tags> tagsesData = await Tags.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tagsesData;
  }

  /// This method returns Json String [Tags]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tags]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tags]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTags!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tags]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM tags WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTags!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tags]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTags!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Tags.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTags!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TagsFilterBuilder

// region TagsFields
class TagsFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }
}
// endregion TagsFields

//region TagsManager
class TagsManager extends SqfEntityProvider {
  TagsManager()
      : super(ModelMoodJournal(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'tags';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TagsManager
// region Journal
class Journal extends TableBase {
  Journal(
      {this.id,
      this.date,
      this.id_feeling,
      this.idTags,
      this.stressLevel,
      this.selfAssessment,
      this.note}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Journal.withFields(this.date, this.id_feeling, this.idTags, this.stressLevel,
      this.selfAssessment, this.note) {
    _setDefaultValues();
  }
  Journal.withId(this.id, this.date, this.id_feeling, this.idTags,
      this.stressLevel, this.selfAssessment, this.note) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Journal.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['date'] != null) {
      date = int.tryParse(o['date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['date'].toString())!)
          : DateTime.tryParse(o['date'].toString());
    }
    id_feeling = int.tryParse(o['id_feeling'].toString());

    if (o['idTags'] != null) {
      idTags = o['idTags'].toString();
    }
    if (o['stressLevel'] != null) {
      stressLevel = int.tryParse(o['stressLevel'].toString());
    }
    if (o['selfAssessment'] != null) {
      selfAssessment = int.tryParse(o['selfAssessment'].toString());
    }
    if (o['note'] != null) {
      note = o['note'].toString();
    }

    // RELATIONSHIPS FromMAP
    plFeelings = o['feelings'] != null
        ? Feelings.fromMap(o['feelings'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Journal)
  int? id;
  DateTime? date;
  int? id_feeling;
  String? idTags;
  int? stressLevel;
  int? selfAssessment;
  String? note;

  // end FIELDS (Journal)

// RELATIONSHIPS (Journal)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plFeelings', 'plField2'..]) or so on..
  Feelings? plFeelings;

  /// get Feelings By Id_feeling
  Future<Feelings?> getFeelings(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Feelings().getById(id_feeling,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Journal)

  static const bool _softDeleteActivated = false;
  JournalManager? __mnJournal;

  JournalManager get _mnJournal {
    return __mnJournal = __mnJournal ?? JournalManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (id_feeling != null) {
      map['id_feeling'] = forView
          ? plFeelings == null
              ? id_feeling
              : plFeelings!.name
          : id_feeling;
    } else if (id_feeling != null || !forView) {
      map['id_feeling'] = null;
    }
    if (idTags != null || !forView) {
      map['idTags'] = idTags;
    }
    if (stressLevel != null || !forView) {
      map['stressLevel'] = stressLevel;
    }
    if (selfAssessment != null || !forView) {
      map['selfAssessment'] = selfAssessment;
    }
    if (note != null || !forView) {
      map['note'] = note;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (id_feeling != null) {
      map['id_feeling'] = forView
          ? plFeelings == null
              ? id_feeling
              : plFeelings!.name
          : id_feeling;
    } else if (id_feeling != null || !forView) {
      map['id_feeling'] = null;
    }
    if (idTags != null || !forView) {
      map['idTags'] = idTags;
    }
    if (stressLevel != null || !forView) {
      map['stressLevel'] = stressLevel;
    }
    if (selfAssessment != null || !forView) {
      map['selfAssessment'] = selfAssessment;
    }
    if (note != null || !forView) {
      map['note'] = note;
    }

    return map;
  }

  /// This method returns Json String [Journal]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Journal]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      date != null ? date!.millisecondsSinceEpoch : null,
      id_feeling,
      idTags,
      stressLevel,
      selfAssessment,
      note
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      date != null ? date!.millisecondsSinceEpoch : null,
      id_feeling,
      idTags,
      stressLevel,
      selfAssessment,
      note
    ];
  }

  static Future<List<Journal>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Journal.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Journal>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Journal>[];
    try {
      objList = list
          .map((journal) => Journal.fromMap(journal as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Journal.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Journal>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Journal> objList = <Journal>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Journal.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plFeelings'))) {
          obj.plFeelings =
              obj.plFeelings ?? await obj.getFeelings(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Journal by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Journal] if exist, otherwise returns null
  Future<Journal?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Journal? obj;
    final data = await _mnJournal.getById([id]);
    if (data.length != 0) {
      obj = Journal.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plFeelings'))) {
          obj.plFeelings =
              obj.plFeelings ?? await obj.getFeelings(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Journal) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnJournal.insert(this, ignoreBatch);
    } else {
      await _mnJournal.update(this);
    }

    return id;
  }

  /// Saves the (Journal) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnJournal.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnJournal.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Journal. Returns a new Primary Key value of Journal

  /// <returns>Returns a new Primary Key value of Journal
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Journal> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Journal> journals,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await ModelMoodJournal().batchStart();
    for (final obj in journals) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await ModelMoodJournal().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < journals.length; i++) {
        if (journals[i].id == null) {
          journals[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnJournal.rawInsert(
          'INSERT OR REPLACE INTO journal (id, date, id_feeling, idTags, stressLevel, selfAssessment, note)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            date != null ? date!.millisecondsSinceEpoch : null,
            id_feeling,
            idTags,
            stressLevel,
            selfAssessment,
            note
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Journal id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Journal id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Journal Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Journal>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Journal> journals,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnJournal.rawInsertAll(
        'INSERT OR REPLACE INTO journal (id, date, id_feeling, idTags, stressLevel, selfAssessment, note)  VALUES (?,?,?,?,?,?,?)',
        journals,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Journal

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Journal invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnJournal
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnJournal.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Journal] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  JournalFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return JournalFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  JournalFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return JournalFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion journal

// region JournalField
class JournalField extends FilterBase {
  JournalField(JournalFilterBuilder journalFB) : super(journalFB);

  @override
  JournalFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder isNull() {
    return super.isNull() as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as JournalFilterBuilder;
  }

  @override
  JournalFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as JournalFilterBuilder;
  }

  @override
  JournalField get not {
    return super.not as JournalField;
  }
}
// endregion JournalField

// region JournalFilterBuilder
class JournalFilterBuilder extends ConjunctionBase {
  JournalFilterBuilder(Journal obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnJournal = obj._mnJournal;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  JournalManager? _mnJournal;

  /// put the sql keyword 'AND'
  @override
  JournalFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  JournalFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  JournalFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  JournalFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  JournalFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  JournalFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  JournalFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  JournalFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  JournalFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  JournalFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  JournalFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  JournalField _setField(JournalField? field, String colName, DbType dbtype) {
    return JournalField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  JournalField? _id;
  JournalField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  JournalField? _date;
  JournalField get date {
    return _date = _setField(_date, 'date', DbType.datetime);
  }

  JournalField? _id_feeling;
  JournalField get id_feeling {
    return _id_feeling = _setField(_id_feeling, 'id_feeling', DbType.integer);
  }

  JournalField? _idTags;
  JournalField get idTags {
    return _idTags = _setField(_idTags, 'idTags', DbType.text);
  }

  JournalField? _stressLevel;
  JournalField get stressLevel {
    return _stressLevel =
        _setField(_stressLevel, 'stressLevel', DbType.integer);
  }

  JournalField? _selfAssessment;
  JournalField get selfAssessment {
    return _selfAssessment =
        _setField(_selfAssessment, 'selfAssessment', DbType.integer);
  }

  JournalField? _note;
  JournalField get note {
    return _note = _setField(_note, 'note', DbType.text);
  }

  /// Deletes List<Journal> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnJournal!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnJournal!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from journal ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnJournal!.updateBatch(qparams, values);
  }

  /// This method always returns [Journal] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Journal?
  @override
  Future<Journal?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnJournal!.toList(qparams);
    final data = await objFuture;
    Journal? obj;
    if (data.isNotEmpty) {
      obj = Journal.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plFeelings'))) {
          obj.plFeelings =
              obj.plFeelings ?? await obj.getFeelings(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Journal]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Journal?
  @override
  Future<Journal> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Journal();
  }

  /// This method returns int. [Journal]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? journalCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final journalsFuture = await _mnJournal!.toList(qparams);
    final int count = journalsFuture[0]['CNT'] as int;
    if (journalCount != null) {
      journalCount(count);
    }
    return count;
  }

  /// This method returns List<Journal> [Journal]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Journal>
  @override
  Future<List<Journal>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Journal> journalsData = await Journal.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return journalsData;
  }

  /// This method returns Json String [Journal]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Journal]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Journal]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnJournal!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Journal]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM journal WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnJournal!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Journal]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnJournal!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Journal.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnJournal!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion JournalFilterBuilder

// region JournalFields
class JournalFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fDate;
  static TableField get date {
    return _fDate =
        _fDate ?? SqlSyntax.setField(_fDate, 'date', DbType.datetime);
  }

  static TableField? _fId_feeling;
  static TableField get id_feeling {
    return _fId_feeling = _fId_feeling ??
        SqlSyntax.setField(_fId_feeling, 'id_feeling', DbType.integer);
  }

  static TableField? _fIdTags;
  static TableField get idTags {
    return _fIdTags =
        _fIdTags ?? SqlSyntax.setField(_fIdTags, 'idTags', DbType.text);
  }

  static TableField? _fStressLevel;
  static TableField get stressLevel {
    return _fStressLevel = _fStressLevel ??
        SqlSyntax.setField(_fStressLevel, 'stressLevel', DbType.integer);
  }

  static TableField? _fSelfAssessment;
  static TableField get selfAssessment {
    return _fSelfAssessment = _fSelfAssessment ??
        SqlSyntax.setField(_fSelfAssessment, 'selfAssessment', DbType.integer);
  }

  static TableField? _fNote;
  static TableField get note {
    return _fNote = _fNote ?? SqlSyntax.setField(_fNote, 'note', DbType.text);
  }
}
// endregion JournalFields

//region JournalManager
class JournalManager extends SqfEntityProvider {
  JournalManager()
      : super(ModelMoodJournal(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'journal';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion JournalManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await ModelMoodJournalSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await ModelMoodJournalSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await ModelMoodJournalSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class ModelMoodJournalSequenceManager extends SqfEntityProvider {
  ModelMoodJournalSequenceManager() : super(ModelMoodJournal());
}
// END OF ENTITIES
